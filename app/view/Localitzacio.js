/*
 * File: app/view/Localitzacio.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CCIVIC.view.Localitzacio', {
    extend: 'Ext.Panel',

    config: {
        items: [
            {
                xtype: 'map',
                height: 395,
                id: 'map',
                itemId: 'Map',
                ui: ''
            },
            {
                xtype: 'container',
                itemId: 'adrecaContainer',
                ui: '',
                layout: {
                    type: 'hbox'
                },
                items: [
                    {
                        xtype: 'hiddenfield',
                        itemId: 'latHidden'
                    },
                    {
                        xtype: 'hiddenfield',
                        itemId: 'lngHidden'
                    }
                ]
            },
            {
                xtype: 'textfield',
                itemId: 'adreca',
                readOnly: true
            },
            {
                xtype: 'toolbar',
                docked: 'bottom',
                itemId: 'incidBar',
                items: [
                    {
                        xtype: 'button',
                        docked: 'left',
                        itemId: 'btnAdreca',
                        ui: 'round',
                        iconAlign: 'center',
                        iconCls: 'reply',
                        iconMask: true
                    }
                ]
            }
        ],
        listeners: [
            {
                fn: 'onLocalitzacioShow',
                event: 'show'
            },
            {
                fn: 'onAdrecaButtonTap',
                event: 'tap',
                delegate: '#btnAdreca'
            }
        ]
    },

    onLocalitzacioShow: function(component, options) {
        var initialLocation;
        var cornella = new google.maps.LatLng(41.3556405, 2.070240300000023);
        var Lat, Lng;
        var map, geocoder;
        var browserSupportFlag;
        var infowindow = new google.maps.InfoWindow();

        var myOptions = {
            zoom: 17,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        map = new google.maps.Map(document.getElementById("map"), myOptions);       

        // Instancia del geocodificador
        geocoder = new google.maps.Geocoder();

        //Comprovo si tinc una posició gravada a la llista de dades de la incidència
        //si la tinc l'agafo com a localitació inicial
        var store = Ext.data.StoreManager.lookup('IncidStore'),
        list = Ext.getCmp('incidList');

        ListStore = list.getStore();

        for(var i = 0; i < ListStore.getCount(); i++) {   
            if (ListStore.getAt(i).get('IdCamp') === 'LOC'){        
                Lat = ListStore.getAt(i).get('ValorCamp1');
                Lng = ListStore.getAt(i).get('ValorCamp2');
            }
        }

        if (Lat || Lng){    
            initialLocation = new google.maps.LatLng(Lat, Lng);
        }    

        localitza(initialLocation);

        function localitza(initialLocation){
            // Metodo de Geolocalización de W3C
            if(navigator.geolocation) {
                browserSupportFlag = true;
                navigator.geolocation.getCurrentPosition(function(position) {                                
                    console.log(initialLocation);
                    if (!initialLocation){                        
                        initialLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);                                                        
                    }

                    map.setCenter(initialLocation);

                    var marker = new google.maps.Marker({map: map, position: map.getCenter(), draggable: true});

                    processReverseGeocoding(map.getCenter(), showMarkerInfo);

                    google.maps.event.addListener(marker, 'mouseup', function(event) {             
                        processReverseGeocoding(event.latLng, showMarkerInfo);           
                    });      

                    infowindow.setPosition(initialLocation);
                    infowindow.open(map);
                }, function() {
                    handleNoGeolocation(browserSupportFlag);
                });
            } 
            else {
                // El navegador no soporta la Geolocalización
                browserSupportFlag = false;
                handleNoGeolocation(browserSupportFlag);
            }
        }

        function handleNoGeolocation(errorFlag) {
            if (errorFlag === true) {
                initialLocation = cornella;
                contentString = "Error: El servicio de geolocalización ha fallado.";
            } else {
                initialLocation = cornella;
                contentString = "Error: Tu navegador no soporta la geolocalización. Estas en Cornellà?";
            }
            map.setCenter(initialLocation);    
            infowindow.setContent(contentString);
            infowindow.setPosition(initialLocation);
            infowindow.open(map);
        }

        function processReverseGeocoding(location, callback)
        {
            // Propiedades de la georreferenciación
            var request = {
                latLng: location
            };

            // Invocación a la georreferenciación (proceso asíncrono)
            geocoder.geocode(request, function(results, status) {

                /*
                * OK
                * ZERO_RESULTS
                * OVER_QUERY_LIMIT
                * REQUEST_DENIED
                * INVALID_REQUEST 
                */

                if(status == google.maps.GeocoderStatus.OK)
                { 
                    callback (results);                       
                    return results;
                }

                // En caso de error retorna el estado        
                return status;
            });
        }

        function showMarkerInfo(locations)
        {    
            var poblacio, cpostal, pais;

            // Centra el mapa a la ubicació específica
            map.setCenter(locations[0].geometry.location);

            for (i=0;i<locations[0].address_components.length;i++){
                for (j=0;j<locations[0].address_components[i].types.length;j++){
                    if(locations[0].address_components[i].types[j]=="locality"){
                        poblacio = locations[0].address_components[i].long_name;
                    }
                    if(locations[0].address_components[i].types[j]=="postal_code"){
                        cpostal = locations[0].address_components[i].long_name;
                    }
                    if(locations[0].address_components[i].types[j]=="country"){
                        pais = locations[0].address_components[i].long_name;
                    }                
                }
            }
            var poblacioPais = ', '+cpostal+' '+poblacio+', '+pais;    
            var adrecaComplerta = locations[0].formatted_address.replace(poblacioPais,'');

            //Emmagatzemo la longitud i latitud en camps ocults    
            var Lat = locations[0].geometry.location.lat();
            var Lng = locations[0].geometry.location.lng();

            console.log(Lat);
            console.log(Lng);
            Ext.ComponentQuery.query('#latHidden')[0].setValue(Lat);
            Ext.ComponentQuery.query('#lngHidden')[0].setValue(Lng);

            //Comprova que l'adreça estigui dins els limits de Cornellà
            if (cpostal != '08940'){
                Ext.Msg.confirm('Avís:','L\'adreça actual està fora de Cornellà de Llobregat. Vols situar-te?',                        
                function(btn){                            
                    if (btn == 'yes'){
                        console.log('localitza cornella '+ cornella);
                        localitza(cornella);
                    }
                });
                Ext.ComponentQuery.query('#adreca')[0].setValue('');
                Ext.ComponentQuery.query('#latHidden')[0].setValue('');
                Ext.ComponentQuery.query('#lngHidden')[0].setValue('');
            }
            else {
                console.log(adrecaComplerta);
                Ext.ComponentQuery.query('#adreca')[0].setValue(adrecaComplerta); 
                Ext.ComponentQuery.query('#latHidden')[0].setValue(Lat);
                Ext.ComponentQuery.query('#lngHidden')[0].setValue(Lng);
            }
        }
    },

    onAdrecaButtonTap: function(button, e, options) {
        var adreca = Ext.ComponentQuery.query('#adreca')[0].getValue();
        var Lat = Ext.ComponentQuery.query('#latHidden')[0].getValue();
        var Lng = Ext.ComponentQuery.query('#lngHidden')[0].getValue();

        //Gravar l'adreça a listIncid
        var store = Ext.data.StoreManager.lookup('IncidStore'),
        list = Ext.getCmp('incidList');

        ListStore = list.getStore();

        for(var i = 0; i < ListStore.getCount(); i++) {   
            if (ListStore.getAt(i).get('IdCamp') === 'LOC'){        
                ListStore.getAt(i).set('ValorCamp', adreca);
                ListStore.getAt(i).set('ValorCamp1', Lat);
                ListStore.getAt(i).set('ValorCamp2', Lng);        
            }
        }

        this.getParent().pop();
    }

});